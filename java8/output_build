#1 [internal] load build definition from Dockerfile
#1 sha256:eaad803b2cceec587384c9771955c78ae99c60d3c0a77d0b4b7f86c62d411367
#1 transferring dockerfile: 370B done
#1 DONE 0.0s

#2 [internal] load .dockerignore
#2 sha256:273790ea3312f6add0da256a9e9d485fdf86f97bce8610d4e3f37c767b809bc2
#2 transferring context: 2B done
#2 DONE 0.0s

#3 [internal] load metadata for docker.io/library/openjdk:8
#3 sha256:c1006613b124ab347fbb29ae49e2ab62add271baf34bdfe7a7a4c383ac159b76
#3 DONE 0.9s

#4 [builder 1/6] FROM docker.io/library/openjdk:8@sha256:391437351a4b430e10091729b42ae3f9adc1c2817bde687f3186b3b488e7760c
#4 sha256:6a7e65ce9fe278f16fbd8d96cf045a3a52928f83e4a7660df1f28aad3206acde
#4 resolve docker.io/library/openjdk:8@sha256:391437351a4b430e10091729b42ae3f9adc1c2817bde687f3186b3b488e7760c done
#4 CACHED

#5 [stage-1 2/3] WORKDIR /app
#5 sha256:1723127baf1d13ed12fd1bfcf09a92154b78e1f5073dd35af1ffcd9352c951f8
#5 CACHED

#8 [internal] load build context
#8 sha256:d6ba4e3f1da6229f76d0cd8b8947ea999ab489fc94568d9c5be2870312f9125b
#8 transferring context: 6.03kB done
#8 DONE 0.0s

#6 [builder 2/6] RUN javac -version
#6 sha256:0f1caebbcdf041319882cdaa09fd2c15e024b7ce2d36f98cb330c73b311ff5f2
#6 0.368 javac 1.8.0_292
#6 DONE 0.4s

#7 [builder 3/6] WORKDIR /app
#7 sha256:22de7b1ef28507d7b15488c1b2e42a94e9ae6e08f59875ecc5dac87e08d87a6a
#7 DONE 0.0s

#9 [builder 4/6] COPY . .
#9 sha256:48a8c7fd61f37c70d4317ce6bef278d146a8b9b50481bb841abdf596725a0a03
#9 DONE 0.0s

#10 [builder 5/6] RUN javac *.java
#10 sha256:14090d8865a5d5254fd190fb87b801a3a8049831e7379111d0de8c66c4885037
#10 DONE 0.9s

#11 [builder 6/6] RUN jar cvfe app.jar SquareRoot *.class
#11 sha256:9698d955d70593f2be3bedb8be37cd3c8a049f44016012bf1ac803fafda9a7a4
#11 0.455 added manifest
#11 0.474 adding: SquareRoot$Result.class(in = 372) (out= 274)(deflated 26%)
#11 0.474 adding: SquareRoot.class(in = 3170) (out= 1822)(deflated 42%)
#11 DONE 0.5s

#12 [stage-1 3/3] COPY --from=builder /app/app.jar .
#12 sha256:5b6f7a7d36e78cd3a776c491da9ff033ffeed57e89158b6e0838f6cc5b58b444
#12 DONE 0.0s

#13 exporting to image
#13 sha256:e8c613e07b0b7ff33893b694f7759a10d42e180f2b4dc349fb57dc6b71dcab00
#13 exporting layers 0.0s done
#13 writing image sha256:b646d7ffb6ba43b6b3ae9762c6fde3d5959097a7141beeb6cc4aa208a53f4133 done
#13 naming to docker.io/library/square-root-java8 done
#13 DONE 0.0s

Use 'docker scan' to run Snyk tests against images to find vulnerabilities and learn how to fix them
